/'
https://plantuml.com/ja/class-diagram
http://www.itsenka.com/contents/development/uml/class.html
'/
@startuml
interface StrategyIF{
    ==
    st : Strategy
    --
    TesterRun()
    Opt = createOpt(GA,WFA) : OptBase ※ポリモーフィズム化
    run(st, Opt)
}
class Strategy{
    ◆extend : StrategyIF
    NOTE:\n外部変数は共有オブジェクトに\n※グローバルやシングルトンに依存させない
    ==
    st : Strategy
    Opt = createOpt(GA,WFA) : OptBase ※ポリモーフィズム化
    run(st, Opt)
    --
    外部変数は共有オブジェクトに\n※グローバルやシングルトンに依存させない
}

interface OptimizerIF{
    ◆extend : Aggregate
    ==
    ret: rnkRslt:list = [optRslt01, optRslt02,...]
    　※optRslt=(対応適合度関数rslt:Rslt,param:(optWFCnt:int,optOOSRate:Flort,...etc))
    exm:
    ..
    arg: [ Opt*=GA,OptPrm[]=GaPrm, AnlyzerIF*,Compati*=profit||MaxDD...etc
    ,(optArg1:Tuple,...,optArgm:Tuple),(detArg1(date:Tuple),...etc) ]
    exm: GA,optPrm, WFA,optArg[tuple],
    __
    -isStressTest :bool = true
    -stressTestCount:int = 3
    -stressTestRate:flort = 0.1
    --
    CreateOptmizer(Opt*,OptPrm[], CompatiObj=Prof||MaxDD||ret...etc,)
}

interface AnlyzerIF{
    ◆extend : Iterator
    ==
    ret:
    exm:
    ..
    arg:
    exm:
    __
    TODO:variable
    --
    TODO:method
}


class WFO{
    ◆extend : OptimizerIF
    ==
    WFAのパラメータの最適化を行う
    ※WFOクラスター分析とは\nWFOの運用に際して良い設定値を探すために各設定によるWFAを行い、
    　設定した適合度関数が良い結果のクラスターを探すこと\n
    ※1回WFAにおけるWFOをシングルWFO、複数回のWFAにおけるWFOをクラスタWFO
    __
    strategyPrm : list 引数リストor引数生成関数と引数リスト
    trdmarket:list ->St
    anlymarket:list ->St
    anlyPeriod : tuple ※検証開始-終了期間を年月日指定
    conpatible : interface[Strategyパターン]\n　適合度関数[純利、最大DD、リターン等]\n　入力量に対する集計方法が違うので切替
    StrTstCnt,StrTstRate:tuple:ストレステスト回数、割合
    --
    detParam():Param 初期検証パラメータとRslt考慮した次の検証パラメータ決定\n (GA等考慮する場合最適化の順番が流動的に変化するため)
    funcObj.Run(detParam)
}


class WFA{
    WFO設定パラメータ群における1組のWFAを1回実行\n ※WFA1回＝WFCnt回数分Stragegyパラメータの最適化を行う\n出力例:rslt:Rslt
    引数 最適化変数群optArg11~mnと決定変数群detArg1~kのTuple\n入力例:[ (10,0.2),( (20100101,20191231),...etc ) ]\nNOTE:\n単位入力量における、各インサンプル期間の\nTrd数サンプルは最低30以上欲しい\n入力量4なら合計120Trdサンプルに？
    --
    WFCnt:int = 10 ※入力量:IOS+OOSのサンプリング回数
    OOSRate:flort = 0.2
    InRslt:Param* = [[begin1,end1,param,rslt],...]各インサンプル検証毎のパラメーターと結果を格納する
    OutRslt:Param* 各アウトオブサンプル検証毎のパラメーターと結果を格納する
    BgnPrd:tuple[int,int] = 20010101,20011231 ※インサンプル期間開始-終了
    EndPrd:tuple[int,int] = 20020101,20021231 ※アウトオブサンプル期間開始-終了
    RunInTst(detParam):inRslt 複数期間における検証結果をリストにして返す
    RunInOpt():inRslt 複数期間における検証結果をリストにして返す
    RunOutTst():outRslt 複数期間における検証結果をリストにして返す
    PutRslt(OutRslt)
}


class Optmizer{
    ◆extend : OptimizerIF
    パラメータの最適化を行う\n戻値\n各Rslt[&Param]を適合度関数順に整理した結果を返す\n出力例: \nrnkRslt:list = [optRslt01, optRslt02,...]\n ※optRslt=[対応適合度関数rslt:Rslt, param:Tuple]
    引数\n[ OptMthd*, FuncObj*,(optArg1:Tuple,...,optArgm:Tuple),\n  (detArg1(date:Tuple),...etc) ]\n入力例:
    --
    prmRslt:PrmRslt = [] Stに対する各入力パラメータと結果のリストを格納
    prmRsltOpt:PrmRslt = [] Rsltの各入力パラメータと結果組を採用順に並び替えたもの
    CreateTester(St, prmRslt):list 複数期間における検証結果をリストにして返す
    rsltOpt.append([ tmp3,[objfunc.Run(tmp3)] ])\n ※最適化対象オブジェクト実行メソッドの目的結果と対象最適化変数組を順次格納
}

class TSA{
    時系列分析にてStragegyに設定されたパラメでパフォーマンス測定を1回行う\n　※指定期間に対応する各一組のStragegyパラメータ群が対象\n　※通常の検証の場合一組の指定期間を入力するが、\n　WFO後は複数組の指定期間&パラメ\n出力例:\nrslt:Rslt
    入力例:\n単一paramの場合 ※最適化で何度も回すとき等\n[( (arg11,arg12,...arg1n),((20020101,20051231),...etc) )]\n複数paramの場合 ※WFO完了後OOS結合後テスト等\n[( (optArg11,optArg12,...optArg1n),((20020101,20021231),...etc) ),\n ( (optArg21,optArg22,...optArg2n),((20030101,20031231),...etc) ),...etc]
    --
    Run(Strategy) Strategyの内容を実行
}



StrategyIF ...> OptimizerIF : Uses by\nadapter >
StrategyIF ...> AnlyzerIF : Uses by\nadapter >
StrategyIF *--> StrategyIF
OptimizerIF *->AnlyzerIF

StrategyIF "1" <|... "1" Strategy : Extend <
OptimizerIF <|... WFO : Imprement <
AnlyzerIF <|...  WFA : Imprement <
OptimizerIF <|... Optmizer : Imprement <
AnlyzerIF <|... TSA : Imprement <

WFO "1" *-> "1..m*n" WFA : Contains <
WFA "1" ..> "1" Optmizer : Request >
Optmizer "1" *-> "1..m*n" TSA : Contains <


newpage

interface Rnk(Object){
    最適化結果と変数に関連する情報格納用変数
    並替メソッド(適合度関数ポインタ)
}
note left of Rank : 並べ替え機能と記録用Obj
note right of Rank : 


/'

'/
@enduml