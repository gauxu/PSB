#Todo# Ended elements moved at  __UpdateLog.txt and insert upper at docment.
[190822]毎日確認/Rep PSB_LM.xmind
[190822]1日1回必ずコミット&GitやUnOrg整理

#Plan#
[190828]長期トレンド戦略検証　できれば複数パラメーター　PSBをOneMax問題対応
[190823]検証記録の正規化やフォーマット化　やったことをアーカイブ化して見直したい
[190823]鞘取りペア調査環境整備
[190822]結果を見やすく可視化
出力結果をデータサイエンス用の環境で可視化モジュール
[200813]マルチタイムフレーム分析のためにスレッド機能を調べてみる
[200813]プログレスバーなどで同時並行処理がしたい→GUI実装の勉強

#AnalyzeIdea#
[200813]押目by順張りシステムを構築(基本ユーロドル用)

[190902]順張りスキャ
・新高値や新安値の少し手前周辺で連続スキャ
前の新高値安値をもう一度試しに行くことはよくあるが、
その手前で小さなレンジを作るときは高い確率で更新しにいってから反転する。
・先レンジをブレイクした時の初押しトレード
1回目の押し目はOK　2回目は駄目＝2回順行で手仕舞いandセットアップ完了

[190902]カウンタートレード
長期トレンドが不調なときの分散システム
順張りスキャとも反対の結果になるはず

[190828]長期トレンド戦略検証　利益になる銘柄が
対象銘柄利益目標70%%
PSBをOneMax問題に対応できるように拡張

[190823]各相関性の強い銘柄を対象に鞘取り
SetUp:H4orH1時間軸でバーの最初を100としてお互いの株価の変化に対する
価格の乖離チャートのレンジが定期的に交差するタイミングがあるか確認
乖離のピボットをクロスする度にリセット、
乖離チャートのクロスまでの平均乖離をカウントしている
Entry:平均乖離に到達したら高いほうをSell安いほうをBuy
Exit:乖離チャートの平均交差時間の倍を超えたら　or　乖離チャートがクロスした
Mrkt:日々の値動きの%のベクトルに相関性のあるペア(それより短い時間で広がった鞘が収束)
Todo:
01_実装の前に各銘柄の相関性を調査する準備
02_様々な銘柄から総当たりで探す環境整備
03_見つけたら短い時間足の情報収集

[190822]
高値(2日以上安値方向へ更新無)から3ATR(10)&10%以上の下落で買いセットアップ
Entry:翌日全日安値より安く寄付いたら成行買い　そうでなければ全日安値指値&不成引買
Exit:2ATR利益が出たら指値決済　エントリーした次の日に利益でなければ引成決済
PosSize:資金の10%
Mrkt:75MAより上にある成長株式銘柄

[190822]日足の髭が多いチャートで逆張りデイトレ

[190822]amznのような綺麗なモデルに対する平均回帰トレード
大きく膨らんだ時は膨らんだ期間と値動きに分散させることで柔軟性を持った逆張りエントリー
対象銘柄はAmznのような順調に成長している銘柄のマーケット

#UnOrgMemo#
### オブジェクト指向の目的は頻繁に変更されるであろう箇所をクラスに抽出するスタイル ###
#必要そうなObj
#Tester管理CL
# 最低検証時間軸
# 資産曲線

### 継承の本質はインターフェイス ###
# 継承とは、親クラスから機能を受け継ぐためのものではない 各クラスの概念そのものである
# 継承の本質は、交換可能なパーツを作成するために共通点を「規格」としてまとめ上げられるインターフェイス
#親クラスには何も実態は持たせない=インターフェイス
# 実装が伴う場合は安易にコーディングの手間を減らしてるだけ→すべてに共通する絶対変更できない部分になる
#Tester管理オブジェクトを各種検証Objに参照渡しをすることで共通データを共有させる
#
### オブジェクトコンポジションをやるべき ###
#
#Engine engine = new JetEngine();
#Handle handle = new QuickHandle();
#Brake brake = new AntilockBrake();
#Wheel wheel = new StudlessWheel();

#Car car = new Car(engine, handle, brake, wheel);
#
### オブジェクトコンポジション　ここまで ###
#メインクラスかファクトリやクリエイトにてのみNewを使用する
#テスタークラス(メイン)の中でのみオブジェクト宣言(New)を行う
#検証対象マーケットObjをリストにする
#検証対象マーケットObjの中に売買マーケットリストと参照マーケットリストを作る

#対象マーケットの最低検証時間軸に応じてカウントを進めていく
#各マーケットの時間足がそれ以上だとしても管理Objに設定された最低検証時間軸を基準に動かす

#管理Objに含めたいもの
# pythonでは全て参照渡し(ポインタ)なので意図しない変更がされてしまうリスクがある。
# mutableでiterableであるものを参照渡しの意義でつかう
# imutableでiterableであるものを自動変数にする
#以上のことから変更されるとまずいものは基本的にimutableな型で定義しておくべき
#本当に参照渡しにしたい場合はmutableな型で定義するべし。
#ただ、双方向の疎結合要素を減らすことを考慮するならimutableを極力採用する