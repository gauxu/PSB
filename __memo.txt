[999999]★★★常時上で確認したいメモ★★★
Lib及びimportモジュール_memo
SystemTester.py     #各サンプルのテストモジュールの元になっている
getData.py          #株価や基本データを纏めて読み込む→データベースから
dataLists.py        #myDate,myTime,myOpen,myHigh,myLow,myClose
tradeClass.py       #tradeInfo
equityDataClass.py  #equityClass
trade.py            #trade
systemMarket.py     #systemMarketClass
portfolio.py        #portfolioClass
systemAnalytics.py  #calcSystemResults

marketDataClass.py
tradeModule.py

masterDateList
※NOTE:その他予約語等 → __ReserveWords.txt  …Ref

・デバッグコンソールには処理の途中経過と_Compositeの内容が出力

・出力ファイルmemo
_Composite  #全Mrkt毎結果と合算月間リターン推移
_Summary    #銘柄ごとの成績と月間推移
_Trades     #各銘柄ごとのトレード記録
_StrtTrdDD  #トレードを開始してからの任意のすべてに対するMDD調査
_MonteCarlo #モンテカルロシミュレーション結果

GA関連用語
creator.FitnessMax:適応度クラス
creator.Individual:個体クラス　適応度クラスを属性として持つ
toolbox.attr_bool:遺伝子を生成する関数
toolbox.individual:個体を生成する関数
toolbox.population:個体集団を生成する関数
toolbox.evaluate:評価関数
toolbox.mate:交差を実行する関数
toolbox.mutate:変異を実行する関数
toolbox.select:次世代の個体を選択する関数

★★★環境構築★★★
[ルール・手順]
※Anacondaを使わない
env\Scripts\activate.batでプロジェクト毎の仮想環境にPipでインスコ
pip listでパッケージの状態を確認できる。

■仮想環境(Note:今はvenvを利用してるがvirtualenvを使うべき)
・Bashで仮想環境に入る
source ./(virtualEnvName)/Scripts/activate
・Bashの仮想環境から出る
deactivate

■github関連
※迷ったら状態確認 git status

・リポジトリからコピー
cd ~/WorkingDir #作業フォルダに移動して行わないとその場所にcloneされる
git clone git@github:gauxu/PSB
cd /cloneDir

・ファイル追加
git add filename.*
git commit -m "[yymmdd]@user_description" filename.*
git remote add master/origin https://github.com/#username#/#directry#
git push
git status    #Pushできたか確認
＃VSCのソース管理を使うとファイル追加やコミットメントがお手軽。最後にPushすればおｋ

・ファイル更新
git commit -m "[yymmdd]@user "filename.*"
git push
・ファイル名前場所変更
git mv <resorce> <destonation>
※その後ファイル更新作業

・ファイル削除
git rm -r filename.*    実ファイルも消えるので先にコピー推奨
git status              変更(削除ファイル)がステージされているか確認(緑文字)
git comit -m "[yymmdd]@User:コミットのdescription"
git status              コミットが出来ているか確認(Commit件数の有無)
git push                リポジトリのファイルに削除が反映される

※NOTE:
※ログファイルなど大量に吐き出されるファイルはフォルダ分け必須
間違えてファイルをPushしてしまった場合ブラウザベースで個別削除大変

・GithubでPushできない＞＜？変更箇所だけ退避しCloneし直して退避分上書き後再Push※
git clone git@github.com:gauxu/PSB.git

■命名規則等
クラス関連
★privete変数・メソッドは頭に_を就ける(private宣言できないため)
？継承は抽象度によって使い分ける
？多階層化は抽象度上がれば行う、並列的な場合は1層の多重継承で
？判断基準は上の概念に結果が従属しそうなものを下層にする
★クラスメソッドを使えば連鎖的なメソッド処理ができる
スタティックメソッドとは違いインスタンスに属するため従属的

■参考
[190809]Git関連資料
・サルでもわかるGit入門
https://backlog.com/ja/git-tutorial/
※やりたいことの逆引有※　初心者～コードレビュー文化をチーム布教まで幅広くカバー

・今日からはじめるGitHub ? 初心者がGitをインストールして、プルリクできるようになるまでを解説
https://employment.en-japan.com/engineerhub/entry/2017/01/31/110000#%E3%83%91%E3%82%B9%E3%83%95%E3%83%AC%E3%83%BC%E3%82%BA%E3%82%92%E5%85%A5%E5%8A%9B%E3%81%99%E3%82%8B
多岐わたって説明が丁寧で網羅性高 GitとGitHubの違い説明有　ブランチ・マージの管理手順有

・超基本Github
https://qiita.com/bakainubau/items/4613dda50a5fa302d212
[Init or Clone] > add(新規ファイル) > commit > [remote] > push(必要あればpull)　が基本的な流れ

・チーム開発を変える「Github」とは？導入～連載記事
https://seleck.cc/630

・使いこなせると便利なGitコマンド一覧
https://www.wakuwakubank.com/posts/262-git-command/

・Git初心者に捧ぐ！Gitの「これなんで？」を解説します。
https://kray.jp/blog/git-why-explanation/
